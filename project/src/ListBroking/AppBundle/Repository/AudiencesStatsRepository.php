<?php

namespace ListBroking\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use ListBroking\AppBundle\Model\AudiencesFilter;

/**
 * AudiencesStatsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AudiencesStatsRepository extends EntityRepository implements AudiencesStatsRepositoryInterface
{
    /**
     * @inheritDoc
     */
    public function truncate(): void
    {
        $connection = $this->getEntityManager()->getConnection();

        $connection->query('SET FOREIGN_KEY_CHECKS=0');
        $connection->executeUpdate('TRUNCATE audiences_stats');
        $connection->query('SET FOREIGN_KEY_CHECKS=1');
    }

    /**
     * @inheritDoc
     */
    public function updateStats(string $minimumRestingDate): void
    {
        $connection = $this->getEntityManager()
                           ->getConnection();

        $query = 'INSERT INTO audiences_stats (owner_id,country_id,district_id,sub_category_id,gender,age,is_mobile,total)
                  SELECT c.owner_id,
                         c.country_id, 
                         c.district_id,
                         c.sub_category_id, 
                         g.name,
                         YEAR(CURRENT_TIMESTAMP) - YEAR(c.birthdate) - (RIGHT(CURRENT_TIMESTAMP, 5) < RIGHT(c.birthdate, 5)) AS age, 
                         l.is_mobile,
                         count(*) AS total
                  FROM contact c
                  JOIN lead l ON l.id=c.lead_id
                  JOIN gender g ON g.id=c.gender_id
                  WHERE c.is_clean=1
                    AND (c.birthdate IS NULL OR c.birthdate <= DATE(NOW()-INTERVAL 18 YEAR))
                    AND c.id NOT IN (SELECT DISTINCT(contact_id) 
                                     FROM extraction_contact 
                                     WHERE extraction_id IN (SELECT id FROM extraction WHERE STATUS=3 AND sold_at >=:minimum_resting_date)
                                    )
                    AND l.in_opposition=0
                    AND l.is_ready_to_use=1
                  GROUP BY c.owner_id, c.country_id, c.district_id, c.sub_category_id, g.name, age, l.is_mobile;';

        $statement = $connection->prepare($query);
        $statement->execute(
            [
                'minimum_resting_date' => $minimumRestingDate,
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function getAudiences(AudiencesFilter $filter): array
    {
        $selectFields  = [];
        $groupByFields = [];

        if ($filter->getFields() !== null) {
            foreach ($filter->getFields() as $field) {
                switch ($field) {
                    case AudiencesFilter::FIELD_GENDER:
                        $selectFields[]  = 'a.gender';
                        $groupByFields[] = 'a.gender';
                        break;
                    case AudiencesFilter::FIELD_AGE:
                        $selectFields[]  = 'a.age';
                        $groupByFields[] = 'a.age';
                        break;
                    case AudiencesFilter::FIELD_DISTRICT:
                        $selectFields[]  = 'd.name';
                        $groupByFields[] = 'd.name';
                        break;
                    case AudiencesFilter::FIELD_CATEGORY:
                        $selectFields[]  = 'sc.name';
                        $groupByFields[] = 'sc.name';
                        break;
                    case AudiencesFilter::FIELD_IS_MOBILE:
                        $selectFields[]  = 'a.is_mobile';
                        $groupByFields[] = 'a.is_mobile';
                        break;
                }
            }
        }
        $selectFields[] = 'SUM(a.total) as total';

        $statement = $this->getEntityManager()
                          ->createQueryBuilder()
                          ->select(implode(',', $selectFields))
                          ->from('ListBrokingAppBundle:AudiencesStats', 'a')
                          ->join('a.owner', 'o')
                          ->join('a.country', 'c')
                          ->join('a.district', 'd')
                          ->join('a.sub_category', 'sc')
                          ->where('c.name = :country')
                          ->andWhere('o.name = :owner_name')
                          ->setParameter('country', $filter->getCountry())
                          ->setParameter('owner_name', $filter->getOwner());

        if (!is_null($filter->getGender())) {
            $statement->andWhere('a.gender IN (:gender)')
                      ->setParameter('gender', $filter->getGender());
        }

        if (!is_null($filter->getMinAge())) {
            $statement->andWhere('a.age >= :min_age')
                      ->setParameter('min_age', $filter->getMinAge());
        }

        if (!is_null($filter->getMaxAge())) {
            $statement->andWhere('a.age <= :max_age')
                      ->setParameter('max_age', $filter->getMaxAge());
        }

        if (!is_null($filter->getIncludedDistricts())) {
            $statement->andWhere('d.name IN (:included_districts)')
                      ->setParameter('included_districts', $filter->getIncludedDistricts());
        }

        if (!is_null($filter->getExcludedDistricts())) {
            $statement->andWhere('d.name NOT IN (:excluded_districts)')
                      ->setParameter('excluded_districts', $filter->getExcludedDistricts());
        }

        if (!is_null($filter->getIncludedCategories())) {
            $statement->andWhere('sc.name IN (:included_categories)')
                      ->setParameter('included_categories', $filter->getIncludedCategories());
        }

        if (!is_null($filter->getExcludedCategories())) {
            $statement->andWhere('d.name NOT IN (:excluded_categories)')
                      ->setParameter('excluded_categories', $filter->getExcludedCategories());
        }

        if (!is_null($filter->getIsMobile())) {
            $statement->andWhere('a.is_mobile = :is_mobile')
                      ->setParameter('is_mobile', $filter->getIsMobile());
        }

        if (!empty($groupByFields)) {
            $statement->groupBy(implode(',', $groupByFields));
        }

        return $statement->getQuery()
                         ->getArrayResult();
    }
}
